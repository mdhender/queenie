// Code generated by oto; DO NOT EDIT.

package solver

import (
	"context"
	"net/http"

	"github.com/mdhender/queenie/internal/otohttp"
)

// SolverService lists the known words for a puzzle.
type SolverService interface {

	// Solve returns a solution.
	Solve(context.Context, PuzzleRequest) (*SolutionResponse, error)
}

type solverServiceServer struct {
	server        *otohttp.Server
	solverService SolverService
}

// Register adds the SolverService to the otohttp.Server.
func RegisterSolverService(server *otohttp.Server, solverService SolverService) {
	handler := &solverServiceServer{
		server:        server,
		solverService: solverService,
	}
	server.Register("SolverService", "Solve", handler.handleSolve)
}

func (s *solverServiceServer) handleSolve(w http.ResponseWriter, r *http.Request) {
	var request PuzzleRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.solverService.Solve(r.Context(), request)
	if err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
}

// PuzzleRequest is the request object for SolverService.Solve
type PuzzleRequest struct {
	// Center letter is the required letter. It must be a single, lower-case letter.
	Center string `json:"center"`
	// Hex letters are the remaining six letters accepted in the solution. It must be a
	// string containing exactly six lower-case letters.
	Hex string `json:"hex"`
}

// SolutionResponse is the response object containing the list of known words that
// satisfy the puzzle.
type SolutionResponse struct {
	// Words is the list of known words that satisfy the puzzle.
	Words []string `json:"words"`
	// Error is string explaining what went wrong. Empty if everything was fine.
	Error string `json:"error,omitempty"`
}
